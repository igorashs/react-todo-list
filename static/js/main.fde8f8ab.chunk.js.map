{"version":3,"sources":["Header.tsx","TodoStore.ts","TodoContext.tsx","TodoList.tsx","NewTodoForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","title","flexGrow","fabLink","boxShadow","Header","classes","AppBar","position","Toolbar","Typography","variant","className","Fab","href","target","rel","size","TodoStore","todos","addTodo","text","push","id","nanoid","isCompleted","removeTodo","filter","t","toggleCompleted","map","makeAutoObservable","this","TodoContext","createContext","TodoProvider","children","Provider","value","useTodoStore","useContext","TodoList","observer","List","length","todo","ListItem","data-testid","button","onClick","Container","disableGutters","Paper","Box","p","style","textDecoration","wordBreak","Button","color","NewTodoForm","useState","newTodo","setNewTodo","open","setOpen","handleClose","Grid","container","direction","display","justifyContent","px","type","Dialog","onClose","fullWidth","DialogTitle","DialogContent","TextField","inputProps","autoFocus","label","onChange","e","DialogActions","App","maxWidth","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fde8f8ab.chunk.js","sourcesContent":["import {\n  AppBar,\n  Toolbar,\n  Typography,\n  Fab,\n  makeStyles,\n} from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nconst useStyles = makeStyles({\n  title: {\n    flexGrow: 1,\n  },\n\n  fabLink: {\n    boxShadow: 'none',\n  },\n});\n\nconst Header = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar>\n        <Typography variant=\"h4\" className={classes.title}>\n          TodoList\n        </Typography>\n        <Fab\n          className={classes.fabLink}\n          href=\"https://github.com/igorashs/react-todo-list\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          size=\"small\"\n        >\n          <GitHubIcon />\n        </Fab>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import { nanoid } from 'nanoid';\nimport { makeAutoObservable } from 'mobx';\n\ninterface Todo {\n  text: string;\n  id: string;\n  isCompleted: boolean;\n}\n\nexport default class TodoStore {\n  todos: Array<Todo> = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  addTodo = (text: string) => {\n    this.todos.push({ text, id: nanoid(), isCompleted: false });\n  };\n\n  removeTodo = (id: string) => {\n    this.todos = this.todos.filter((t) => t.id !== id);\n  };\n\n  toggleCompleted = (id: string) => {\n    this.todos = this.todos.map((t) =>\n      t.id === id ? { ...t, isCompleted: !t.isCompleted } : t,\n    );\n  };\n}\n","import React, { createContext, useContext } from 'react';\nimport TodoStore from './TodoStore';\n\nexport const TodoContext = createContext<TodoStore>({} as TodoStore);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const TodoProvider = ({ children }: Props) => {\n  return (\n    <TodoContext.Provider value={new TodoStore()}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n\nexport const useTodoStore = () => useContext(TodoContext);\n","import { observer } from 'mobx-react-lite';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n  Box,\n  Button,\n  Container,\n  List,\n  ListItem,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { useTodoStore } from './TodoContext';\n\nconst TodoList = observer(() => {\n  const { todos, removeTodo, toggleCompleted } = useTodoStore();\n\n  return (\n    <List>\n      {!todos.length ? (\n        <Typography>Todo List is empty</Typography>\n      ) : (\n        todos.map((todo) => (\n          <ListItem\n            data-testid=\"todo-item\"\n            key={todo.id}\n            button\n            onClick={() => toggleCompleted(todo.id)}\n          >\n            <Container disableGutters>\n              <Paper>\n                <Box p={2}>\n                  <Typography\n                    style={{\n                      textDecoration: todo.isCompleted\n                        ? 'line-through'\n                        : 'none',\n                      wordBreak: 'break-all',\n                    }}\n                  >\n                    {todo.text}\n                  </Typography>\n                  <Button\n                    data-testid=\"todo-delete-item\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => removeTodo(todo.id)}\n                  >\n                    <DeleteIcon />\n                  </Button>\n                </Box>\n              </Paper>\n            </Container>\n          </ListItem>\n        ))\n      )}\n    </List>\n  );\n});\n\nexport default TodoList;\n","import {\n  Grid,\n  TextField,\n  Button,\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from '@material-ui/core';\nimport { useState } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport { useTodoStore } from './TodoContext';\n\nconst NewTodoForm = () => {\n  const { addTodo } = useTodoStore();\n  const [newTodo, setNewTodo] = useState('');\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n    setNewTodo('');\n  };\n\n  return (\n    <>\n      <Grid container direction=\"column\">\n        <Box display=\"flex\" justifyContent=\"flex-end\" px={2}>\n          <Button\n            data-testid=\"open-btn\"\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"button\"\n            onClick={() => setOpen(true)}\n          >\n            <AddIcon />\n          </Button>\n        </Box>\n      </Grid>\n\n      <Dialog open={open} onClose={() => handleClose()} fullWidth>\n        <DialogTitle>Add Todo</DialogTitle>\n        <DialogContent>\n          <TextField\n            inputProps={{ 'data-testid': 'text-input' }}\n            autoFocus\n            label=\"Note\"\n            type=\"text\"\n            value={newTodo}\n            onChange={(e) => setNewTodo(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            data-testid=\"close-btn\"\n            color=\"secondary\"\n            type=\"button\"\n            onClick={() => {\n              handleClose();\n            }}\n          >\n            cancel\n          </Button>\n          <Button\n            data-testid=\"add-btn\"\n            color=\"primary\"\n            type=\"button\"\n            onClick={() => {\n              addTodo(newTodo);\n              handleClose();\n            }}\n          >\n            add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default NewTodoForm;\n","import { Grid, Container } from '@material-ui/core';\n\nimport Header from './Header';\nimport TodoList from './TodoList';\nimport NewTodoForm from './NewTodoForm';\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n\n      <Container maxWidth=\"sm\">\n        <Grid container direction=\"column\">\n          <Grid item>\n            <TodoList />\n            <NewTodoForm />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseLine from '@material-ui/core/CssBaseline';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { TodoProvider } from './TodoContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseLine />\n    <TodoProvider>\n      <App />\n    </TodoProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}